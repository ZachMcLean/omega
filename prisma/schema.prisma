generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  MEMBER
  ADMIN
  SUPERUSER
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  name                String?
  image               String?        // Url to avatar image

  username            String?        @unique
  emailVerified       Boolean        @default(false)
  role                Role           @default(MEMBER)
  onboardingComplete  Boolean        @default(false)
  settings            Json?

  snaptrade           SnaptradeUser?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  accounts            Account[]
  sessions            Session[]
  workspaces          WorkspaceMember[]
}

model SnaptradeUser {
  id                String   @id @default(cuid())
  userId            String   @unique
  snaptradeUserId   String   @unique // what you send to SnapTrade (we'll use User.id)
  userSecret        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id])
}

// Optional: later you can track linked accounts / status
model BrokerageConnection {
  id                String   @id @default(cuid())
  snaptradeUserId   String
  broker            String
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  expiresAt          Int?
  tokenType          String?
  scope              String?
  idToken            String?
  sessionState       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// THis is for later when we have workspaces
enum WorkspaceRole {
    MEMBER
    ADMIN
    OWNER
}

model Workspace {
  id        String           @id @default(cuid())
  name      String
  createdAt DateTime         @default(now())
  members   WorkspaceMember[]
}

model WorkspaceMember {
  id          String         @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole  @default(MEMBER)

  workspace   Workspace      @relation(fields: [workspaceId], references: [id])
  user        User           @relation(fields: [userId], references: [id])

  @@unique([workspaceId, userId])
}